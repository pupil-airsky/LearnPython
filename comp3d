import math
class GrapError(Exception):
    pass
class grap3d:
    def cuboid(a,b,h,x):
        s=round(2*(a*b+a*h+b*h),x)
        v=round(a*b*h,x)
        m=round(4*(a+b+h),x)
        return s,v,m
    def cube(a,x):
        s=round(6*(a**2),x)
        v=round(a**3,x)
        m=round(a*12,x)
        return s,v,m
    def ball(r,x):
        s=round((4*(math.pi)*(r**2)),x)
        v=round(((4/3)*(math.pi)*(r**3)),x)
        return s,v
    def cylinder(r,h,x):
        s=round(((2*(math.pi)*(r**2))+(2*(math.pi)*r*h)),x)
        v=round(((math.pi)*(r**2)*h),x)
        return s,v
    def cone(r,h,l,x):
        if h!=0 and l!=0:
            s=round((((math.pi)*r*l)+((math.pi)*(r**2))),x)
            v=round(((1/3)*(math.pi)*(r**2)*h),x)
            return s,v
        else:
            if (h==0 and l!=0) or (h!=0 and l==0):
                h=((l**2)-(r**2))**0.5
                l=((h**2)+(r**2))**0.5
                s=round((((math.pi)*r*l)+((math.pi)*(r**2))),x)
                v=round(((1/3)*(math.pi)*(r**2)*h),x)
                return s,v
            else:
                raise GrapError('At least one of high and bus is required')
    def torus(R,r,h,x):
        zc=0.0
        if R<=r:
            raise GrapError('The inner radius of the torus should be smaller than the outer radius')
        else:
            if h==0:
                s=round((4*((math.pi)*2)*R*r),x)
                return s
            else:
                s=round((4*((math.pi)*2)*R*r),x)
                v=round(((math.pi)*((R**2)-(r**2))*h),x)
                return s,v
